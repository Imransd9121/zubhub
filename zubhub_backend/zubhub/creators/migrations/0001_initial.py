# Generated by Django 2.2.7 on 2021-05-16 03:47

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.indexes
import django.contrib.postgres.search
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Creator',
            fields=[
                ('password', models.CharField(
                    max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(
                    blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True,
                                                max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True,
                                               max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True,
                                            max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(
                    default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(
                    default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False,
                                        primary_key=True, serialize=False, unique=True)),
                ('avatar', models.URLField(blank=True, max_length=1000, null=True)),
                ('phone', models.CharField(blank=True, max_length=17, null=True)),
                ('dateOfBirth', models.DateField(blank=True, null=True)),
                ('bio', models.CharField(blank=True, max_length=255, null=True)),
                ('followers_count', models.IntegerField(blank=True, default=0)),
                ('following_count', models.IntegerField(blank=True, default=0)),
                ('projects_count', models.IntegerField(blank=True, default=0)),
                ('role', models.PositiveSmallIntegerField(blank=True, choices=[
                 (1, 'CREATOR'), (2, 'MODERATOR'), (3, 'STAFF'), (4, 'GROUP')], default=1, null=True)),
                ('search_vector',
                 django.contrib.postgres.search.SearchVectorField(null=True)),
                ('followers', models.ManyToManyField(
                    related_name='following', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(max_length=106, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('creator', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE,
                                                 primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('subscribe', models.BooleanField(blank=True, default=False)),
            ],
        ),
        migrations.CreateModel(
            name='PhoneNumber',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(max_length=16, blank=True,
                                           null=True, verbose_name='phone number')),
                ('verified', models.BooleanField(
                    default=False, verbose_name='verified')),
                ('primary', models.BooleanField(
                    default=False, verbose_name='primary')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                           to=settings.AUTH_USER_MODEL, verbose_name='creator')),
            ],
            options={
                'verbose_name': 'phone number',
                'verbose_name_plural': 'phone numbers',
            },
        ),
        migrations.AddField(
            model_name='creator',
            name='location',
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, to='creators.Location'),
        ),
        migrations.AddField(
            model_name='creator',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set',
                                         related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='CreatorGroup',
            fields=[
                ('creator', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE,
                                                 primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('description', models.CharField(
                    blank=True, max_length=10000, null=True)),
                ('created_on', models.DateTimeField(
                    default=django.utils.timezone.now)),
                ('projects_count', models.IntegerField(blank=True, default=0)),
                ('members', models.ManyToManyField(blank=True,
                                                   related_name='creator_groups', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='creator',
            index=django.contrib.postgres.indexes.GinIndex(
                fields=['search_vector'], name='creators_cr_search__44165d_gin'),
        ),
    ]
